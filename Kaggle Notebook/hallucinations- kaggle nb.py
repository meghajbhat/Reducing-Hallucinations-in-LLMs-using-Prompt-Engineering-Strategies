{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12004642,"sourceType":"datasetVersion","datasetId":7551842},{"sourceId":12047705,"sourceType":"datasetVersion","datasetId":7581805},{"sourceId":12091484,"sourceType":"datasetVersion","datasetId":7611769}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [markdown]\n# **COMPATABILITY CHECKING OF DATASETS WITH INSTRUCTION FILES**\n\n# %% [code]\n# DOWNLOADING DATASETS\n\n!wget -O /kaggle/working/hotpot_train_v1.1.json http://curtis.ml.cmu.edu/datasets/hotpot/hotpot_train_v1.1.json\n!wget -O /kaggle/working/opendialkg.csv https://raw.githubusercontent.com/facebookresearch/opendialkg/main/data/opendialkg.csv\n!wget -O /kaggle/working/cnn_stories.tgz https://huggingface.co/datasets/ccdv/cnn_dailymail/resolve/main/cnn_stories.tgz\n\n# %% [code]\n# CHECKING HOTPOT_TRAIN_V1.1.JSON COMPATABILITY WITH QA\n\nimport json\n\n# Path to the JSON file\nseed_data_path = '/kaggle/working/hotpot_train_v1.1.json'\n\n# Load the JSON data\nwith open(seed_data_path, 'r', encoding='utf-8') as f:\n    data = json.load(f)\n\n# Print the total number of samples\nprint(f\"Total samples in dataset: {len(data)}\")\n\n# Print the first 5 samples to analyze their structure\nfor i, sample in enumerate(data[:5]):\n    print(f\"Sample {i}: {json.dumps(sample, indent=4)}\")\n\n\n# %% [code]\n# CHECKING OPENDIALKG.CSV COMPATABILITY WITH DIALOGUE\n\nimport csv\n\n# Path to the CSV file\nseed_data_path = '/kaggle/working/opendialkg.csv'\n\n# Load the CSV data\nwith open(seed_data_path, 'r', encoding='utf-8') as f:\n    csv_reader = csv.DictReader(f)\n    rows = list(csv_reader)\n\n# Print the total number of samples\nprint(f\"Total samples in dataset: {len(rows)}\")\n\n# Print the first 5 samples to analyze their structure\nfor i, sample in enumerate(rows[:5]):\n    print(f\"Sample {i}: {json.dumps(sample, indent=4)}\")\n\n\n# %% [code]\n# CHECKING CNN_STORIES.TGZ COMPATABILITY WITH SUMMARIZATION \n\nimport tarfile\nimport os\nimport json\n\n# Path to the .tgz file\nseed_data_path = '/kaggle/working/cnn_stories.tgz'\nextract_path = '/kaggle/working/cnn_stories/'\n\n# Step 1: Extract the .tgz file\nif not os.path.exists(extract_path):\n    with tarfile.open(seed_data_path, 'r:gz') as tar:\n        tar.extractall(path=extract_path)\n        print(f\"Extracted files to {extract_path}\")\n\n# Step 2: Traverse the directory to find files\nfile_list = []\nfor root, dirs, files in os.walk(extract_path):\n    for file in files:\n        file_list.append(os.path.join(root, file))\n\nprint(f\"Total files extracted: {len(file_list)}\")\n\n# Step 3: Read and display the first 5 samples (assuming they are text or JSON files)\nfor i, file_path in enumerate(file_list[:5]):\n    print(f\"\\nSample {i} - File Path: {file_path}\")\n    try:\n        with open(file_path, 'r', encoding='utf-8') as f:\n            content = f.read()\n            # Print the first 500 characters for brevity\n            print(content[:500])  \n    except Exception as e:\n        print(f\"Error reading file {file_path}: {e}\")\n\n\n# %% [markdown]\n# **QA NORMAL**\n\n# %% [code]\n!pip install git+https://github.com/huggingface/transformers -q\n\n# %% [code]\n!pip install bitsandbytes peft accelerate safetensors sentencepiece\n\n# %% [code]\n%cd /kaggle/input/halueval-normal16/generation\n\n# %% [code]\n### Download the datasets\n!wget -O /kaggle/working/hotpot_train_v1.1.json http://curtis.ml.cmu.edu/datasets/hotpot/hotpot_train_v1.1.json\n!wget -O /kaggle/working/opendialkg.csv https://raw.githubusercontent.com/facebookresearch/opendialkg/main/data/opendialkg.csv\n!wget -O /kaggle/working/cnn_stories.tgz https://huggingface.co/datasets/ccdv/cnn_dailymail/resolve/main/cnn_stories.tgz\n\n\n# %% [code] {\"_kg_hide-output\":false}\n# QA ONE TURN DATA NORMAL\n\n# Path to the seed data and output file\nseed_data_path = '/kaggle/working/hotpot_train_v1.1.json'\noutput_path = '/kaggle/working/qa_one-turn_data_normal.json'\n\n# Run your generation script with the correct paths\n!python3 /kaggle/input/halueval-normal16/generation/generate.py \\\n--seed_data /kaggle/working/hotpot_train_v1.1.json \\\n--task qa \\\n--strategy one-turn \\\n--output_path /kaggle/working/qa_one-turn_data_normal.json\n\n\n# %% [code]\n# QA MULTI TURN DATA NORMAL\n\n# Path to the seed data and output file\nseed_data_path = '/kaggle/working/hotpot_train_v1.1.json'\noutput_path = '/kaggle/working/qa_multi-turn_data_normal.json'\n\n# Run your generation script with the correct paths\n!python3 /kaggle/input/halueval-normal1/generation/generate.py \\\n--seed_data /kaggle/working/hotpot_train_v1.1.json \\\n--task qa \\\n--strategy multi-turn \\\n--output_path /kaggle/working/qa_multi-turn_data_normal.json\n\n\n# %% [code]\n# QA FILTER DATA NORMAL\n\n!python3 /kaggle/input/halueval-normal2/generation/filtering.py \\\n--task qa \\\n--file1 /kaggle/input/halueval-normal2/generation/qa/qa_one-turn_data_normal.json \\\n--file2 /kaggle/input/halueval-normal2/generation/qa/qa_multi-turn_data_normal.json \\\n--instruction \"Choose the best answer.\" \\\n--output_path /kaggle/working/filtered_qa_output_normal.json\n\n# %% [code]\n%cd /kaggle/input/halueval-normal3/evaluation\n\n# %% [code]\n!pip install scikit-learn\n\n# %% [code]\n# QA EVALUATE OUTPUT NORMAL\n\n!python3 /kaggle/input/halueval-normal3/evaluation/evaluate.py \\\n--file /kaggle/input/halueval-normal3/evaluation/qa/filtered_qa_output_normal.json \\\n--instruction \"Your evaluation instruction here\" \\\n--output_path /kaggle/working/evaluated_qa_output_normal.json \\\n--task_type qa\n\n\n# %% [markdown]\n# **DIALOGUE NORMAL**\n\n# %% [code]\n!pip install git+https://github.com/huggingface/transformers -q\n\n# %% [code]\n!pip install bitsandbytes peft accelerate safetensors sentencepiece\n\n# %% [code]\n%cd /kaggle/input/halueval-cov-cot/HaluEval-covAndcot/generation\n\n# %% [code]\n### Download the datasets\n!wget -O /kaggle/working/hotpot_train_v1.1.json http://curtis.ml.cmu.edu/datasets/hotpot/hotpot_train_v1.1.json\n!wget -O /kaggle/working/opendialkg.csv https://raw.githubusercontent.com/facebookresearch/opendialkg/main/data/opendialkg.csv\n!wget -O /kaggle/working/cnn_stories.tgz https://huggingface.co/datasets/ccdv/cnn_dailymail/resolve/main/cnn_stories.tgz\n\n\n# %% [code]\n# DIALOGUE ONE TURN DATA NORMAL\n\n# Path to the seed data and output file\nseed_data_path = '/kaggle/working/opendialkg.csv'\noutput_path = '/kaggle/working/dial_one-turn_data_covcot.json'\n\n# Run your generation script with the correct paths\n!python3 /kaggle/input/halueval-cov-cot/HaluEval-covAndcot/generation/generate.py \\\n--seed_data /kaggle/working/opendialkg.csv \\\n--task dialogue \\\n--strategy one-turn \\\n--output_path /kaggle/working/dial_one-turn_data_covcot.json\n\n\n# %% [code]\n# DIALOGUE MULTI TURN DATA NORMAL\n\n# Path to the seed data and output file\nseed_data_path = '/kaggle/working/opendialkg.csv'\noutput_path = '/kaggle/working/dial_multi-turn_data_covcot.json'\n\n# Run your generation script with the correct paths\n!python3 /kaggle/input/halueval-cov-cot/HaluEval-covAndcot/generation/generate.py \\\n--seed_data /kaggle/working/opendialkg.csv \\\n--task dialogue \\\n--strategy multi-turn \\\n--output_path /kaggle/working/dial_multi-turn_data_covcot.json\n\n\n# %% [code]\n# DIALOGUE FILTER DATA NORMAL\n\n#output_path='/kaggle/working/filtered_dial_output.json'\n!python3 /kaggle/input/halueval-cov-cot/HaluEval-covAndcot/generation/filtering.py \\\n--task dialogue \\\n--file1 /kaggle/input/datasets1/dial_one-turn_data_covcot.json \\\n--file2 /kaggle/input/datasets1/dial_multi-turn_data_covcot.json \\\n--instruction \"Choose the best answer.\" \\\n--output_path /kaggle/working/filtered_dial_output_covcot.json\n\n# %% [code]\n%cd /kaggle/input/halueval-cov-cot/HaluEval-covAndcot/evaluation\n\n# %% [code]\n!pip install scikit-learn\n\n# %% [code]\n# DIALOGUE EVALUATE OUTPUT NORMAL\n\n!python3 /kaggle/input/halueval-cov-cot/HaluEval-covAndcot/evaluation/evaluate.py \\\n--file /kaggle/input/filtereddialcovcot/filtered_dial_output_covcot.json \\\n--instruction \"Your evaluation instruction here\" \\\n--output_path /kaggle/working/evaluated_dial_output_covcot.json \\\n--task_type dialogue\n\n\n# %% [markdown]\n# **SUMMARIZATION NORMAL**\n\n# %% [code]\n!pip install git+https://github.com/huggingface/transformers -q\n\n# %% [code]\n!pip install bitsandbytes peft accelerate safetensors sentencepiece\n\n# %% [code]\n%cd /kaggle/input/halueval-normal25/generation\n\n# %% [code]\n### Download the datasets\n!wget -O /kaggle/working/hotpot_train_v1.1.json http://curtis.ml.cmu.edu/datasets/hotpot/hotpot_train_v1.1.json\n!wget -O /kaggle/working/opendialkg.csv https://raw.githubusercontent.com/facebookresearch/opendialkg/main/data/opendialkg.csv\n!wget -O /kaggle/working/cnn_stories.tgz https://huggingface.co/datasets/ccdv/cnn_dailymail/resolve/main/cnn_stories.tgz\n\n# %% [code]\n# Extracting cnn stories file\n\nimport tarfile\nimport os\nimport json\n\n# Path to the .tgz file\nseed_data_path = '/kaggle/working/cnn_stories.tgz'\nextract_path = '/kaggle/working/cnn_stories/'\n\n# Step 1: Extract the .tgz file\nif not os.path.exists(extract_path):\n    with tarfile.open(seed_data_path, 'r:gz') as tar:\n        tar.extractall(path=extract_path)\n        print(f\"Extracted files to {extract_path}\")\n\n# %% [code]\n# SUMMARIZATION ONE TURN DATA NORMAL\n\n# Path to the seed data and output file\nseed_data_path = '/kaggle/working/cnn_stories'\noutput_path = '/kaggle/working/summ_one-turn_data_normal.json'\n\n# Run your generation script with the correct paths\n!python3 /kaggle/input/halueval-normal18/generation/generate.py \\\n--seed_data /kaggle/working/cnn_stories/cnn/stories/ \\ \n--task summarization \\\n--strategy one-turn \\\n--output_path /kaggle/working/summ_one-turn_data_normal.json\n\n\n# %% [code]\n# SUMMARIZATION MULTI TURN DATA NORMAL\n\n# Path to the seed data and output file\nseed_data_path = '/kaggle/working/cnn_stories'\noutput_path = '/kaggle/working/summ_multi-turn_data_normal.json'\n\n# Run your generation script with the correct paths\n!python3 /kaggle/input/cdsaml-normal21/generation/generate.py \\\n--seed_data /kaggle/working/cnn_stories/cnn/stories/ \\\n--task summarization \\\n--strategy multi-turn \\\n--output_path /kaggle/working/summ_multi-turn_data_normal.json\n\n\n# %% [code]\n# SUMMARIZATION FILTER DATA NORMAL\n\n#output_path='/kaggle/working/filtered_dial_output.json'\n!python3 /kaggle/input/halueval-normal25/generation/filtering.py \\\n--task summarization \\\n--file1 /kaggle/input/halueval-normal25/generation/summarization/summ_one-turn_data_normal.json \\\n--file2 /kaggle/input/halueval-normal25/generation/summarization/summ_multi-turn_data_normal.json \\\n--instruction \"Choose the best answer.\" \\\n--output_path /kaggle/working/filtered_summ_output_normal.json \n\n# %% [code]\n%cd /kaggle/input/halueval-normal3/evaluation\n\n# %% [code]\n!pip install scikit-learn\n\n# %% [code]\n# SUMMARIZATION EVALUATE OUTPUT NORMAL\n\n!python3 /kaggle/input/halueval-normal3/evaluation/evaluate.py \\\n--file /kaggle/input/halueval-normal3/evaluation/dialogue/filtered_summ_output_normal.json \\\n--instruction \"Your evaluation instruction here\" \\\n--output_path /kaggle/working/evaluated_summ_output_normal.json \\\n--task_type summarization\n","metadata":{"_uuid":"47cc4625-3428-40f0-a81a-120969f7f38f","_cell_guid":"b70e8aa5-f4d2-4c7c-822c-5a198f1a8aff","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}